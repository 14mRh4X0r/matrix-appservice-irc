Perf:
- Cache whether the virtual matrix user was made, else we needless roundtrip
  and get M_USER_IN_USE errors.

Tests:
- Add more tests for more edgey stuff (like the flakey section)
- Add more tests for different configuration options

Auth:
- Some people may want to have dynamic channel joining but only for authed
  users on that irc network/some other auth eg CAS/OAuth2. We should support
  this. For these 'secure' channels, they are invite only and not published,
  and are joined by PMing the AS? E.g:
   >> Start chat: @irc.example.com_gateway_admin:homeserver.com (xxx: clashes with the nick space)
   >> "/join #foo"
   << "To join this channel, you need to auth via XXX. Go to <url>."
   >> Click url -> Does OAuth/CAS dance, gets redirect back, then AS sends:
   << "You have been authorised as 'your name'. Type '/join <channel>' to join."
   >> "/join #foo"
   << AS sends invite for this user.
 Auth dance ties together the trusted 3p service and the user ID doing the auth.

Flakey:
- Handle being kicked from Matrix rooms
- Handle being disconnected from the IRC network (bot and individual clients)
- Matrix rate limiting (M_LIMIT_EXCEEDED)
- Handle nick clashes (incl. alt nickname support on the bot)
- Handle extreme nick lengths, charsets
- Handle extreme message lengths, charsets

Nice to haves:
- Unit tests
- Alternative backends to mongodb
- Bouncer support (When a Matrix user is bridged into IRC, create a 1:1 room
  with Matrix user and AS bot, and say 'if you want to use a proper nick, send
  back /nick TheNick', which then just proxies straight through to NickServ.
  This DOES mean that the pass goes through the HS and through the AS, but this
  is no worse than other IRC security. Since the AS bot created the room, it has
  the power level and should redact the password event after submission. If 
  there is better support which we can proxy through, we should provide it.)
