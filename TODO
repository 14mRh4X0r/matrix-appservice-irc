Tests:
- Add more tests for more edgey stuff (like the flakey section)
- Add more tests for different configuration options

Auth:
  We want to support CAS/OAuth2 so private IRC networks can be bridged in without
  exposing them to the public. This will be done by configuring the IRC AS to dynamically
  create PRIVATE INVITE-ONLY ROOMS. These rooms will have the AS itself in the room so it
  can invite authorised users. The flow for authing looks like:
   >> Start chat: @appservice_username:homeserver.com
   >> m.room.message => "/join #foo"
   << "To join this channel, you need to auth via <CAS|OAuth2>. Go to <auth url?service>."
   >> Click url -> Does OAuth/CAS dance, gets redirect back, on auth success/failure:
   << "You have been authorised as 'username'. Type '/join <channel>' to join."
                                         OR
   << "Authorisation failed."
   >> "/join #foo"
   << @appservice_username:homeserver.com sends invite for this user.
 Auth dance ties together the trusted 3p service and the user ID doing the auth. The auth
 stored on the AS is simply whether that user ID is an authorised user for that IRC network.

Flakey:
- Handle being kicked from Matrix rooms
- Handle being disconnected from the IRC network (bot and individual clients)
- Matrix rate limiting (M_LIMIT_EXCEEDED)
- Handle nick clashes (incl. alt nickname support on the bot)
- Handle extreme nick lengths, charsets

Nice to haves:
- Unit tests
- Bouncer support (When a Matrix user is bridged into IRC, create a 1:1 room
  with Matrix user and AS bot, and say 'if you want to use a proper nick, send
  back /nick TheNick', which then just proxies straight through to NickServ.
  This DOES mean that the pass goes through the HS and through the AS, but this
  is no worse than other IRC security. Since the AS bot created the room, it has
  the power level and should redact the password event after submission. If 
  there is better support which we can proxy through, we should provide it.)

Nick:
Ideally we should be using the display name of the mx user and not the user id.
This means we need to strip bad characters and handle representing long nicks.
Could do something like win95 style LONGNA~1. We should use the irc username
field to set the user id which cant change and is set on irc client login. 
